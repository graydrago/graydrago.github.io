{"version":3,"sources":["webpack:///webpack/bootstrap c5e273aae1ac4f233e79","webpack:///./src/core.ts"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+FAA+F,kBAAkB;AACjH;AACA;AACA,mGAAmG,kBAAkB;AACrH;AACA;AACA,kGAAkG,kBAAkB;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gHAAgH,kBAAkB;AAClI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"js/script.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c5e273aae1ac4f233e79","window.onload = () => {\n    let scene;\n    let camera;\n    let renderer;\n    let geometry;\n    let material;\n    let mesh;\n    let sphere;\n    let enemy;\n    let light;\n    let raycaster = new THREE.Raycaster();\n    let plane = new THREE.Plane(new THREE.Vector3(0, 0, 1), 0);\n    let composer;\n    let last_frame_time = null;\n    let is_fullscreen_enabled = false;\n    let bullets = {\n        collection: [],\n        directions: [],\n        timers: [],\n        speed: 15,\n        live_time: 2.0,\n        expected_time: 0.05,\n        elapsed_time: 0\n    };\n    let control = {\n        left: false,\n        right: false,\n        up: false,\n        down: false,\n        fire: false,\n        mouse: new THREE.Vector2(1, 1)\n    };\n    let KEY_CODES = {\n        left: \"A\".charCodeAt(0),\n        right: \"D\".charCodeAt(0),\n        up: \"W\".charCodeAt(0),\n        down: \"S\".charCodeAt(0),\n        fullscreen_request: \"F\".charCodeAt(0)\n    };\n    init();\n    window.requestAnimationFrame(animate);\n    function init() {\n        scene = new THREE.Scene();\n        scene.background = new THREE.Color(0xffffff);\n        camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 2000);\n        camera.position.z = 1000;\n        mesh = new THREE.Mesh(new THREE.BoxGeometry(100, 50, 20), new THREE.MeshPhongMaterial({ color: 0x00ff00 }));\n        mesh.position.set(0, 0, 0);\n        scene.add(mesh);\n        sphere = new THREE.Mesh(new THREE.SphereGeometry(25, 32, 32), new THREE.MeshPhongMaterial({ color: 0x0000ff }));\n        sphere.position.x = 3;\n        scene.add(sphere);\n        enemy = new THREE.Mesh(new THREE.BoxGeometry(100, 100, 100), new THREE.MeshPhongMaterial({ color: 0xff0000 }));\n        enemy.position.set(400, 0, 0);\n        scene.add(enemy);\n        light = new THREE.DirectionalLight();\n        light.position.x = camera.position.x;\n        light.position.y = camera.position.y;\n        light.position.z = camera.position.z;\n        scene.add(light);\n        renderer = new THREE.WebGLRenderer();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        composer = new THREE.EffectComposer(renderer);\n        let render_pass = new THREE.RenderPass(scene, camera);\n        let sepia_pass = new THREE.ShaderPass(THREE.SepiaShader);\n        sepia_pass.renderToScreen = true;\n        composer.addPass(render_pass);\n        composer.addPass(sepia_pass);\n        document.body.appendChild(renderer.domElement);\n        window.addEventListener(\"mousemove\", (e) => {\n            control.mouse.x = (e.clientX / window.innerWidth) * 2 - 1;\n            control.mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;\n        });\n        window.addEventListener(\"keydown\", (e) => {\n            switch (e.keyCode) {\n                case KEY_CODES.left:\n                    control.left = true;\n                    break;\n                case KEY_CODES.right:\n                    control.right = true;\n                    break;\n                case KEY_CODES.up:\n                    control.up = true;\n                    break;\n                case KEY_CODES.down:\n                    control.down = true;\n                    break;\n                case KEY_CODES.fullscreen_request:\n                    let canvas = document.body.querySelector(\"canvas\");\n                    request_fullscreen(canvas);\n                    break;\n            }\n        });\n        window.addEventListener(\"keyup\", (e) => {\n            switch (e.keyCode) {\n                case KEY_CODES.left:\n                    control.left = false;\n                    break;\n                case KEY_CODES.right:\n                    control.right = false;\n                    break;\n                case KEY_CODES.up:\n                    control.up = false;\n                    break;\n                case KEY_CODES.down:\n                    control.down = false;\n                    break;\n            }\n        });\n        window.addEventListener(\"mousedown\", (e) => {\n            control.fire = true;\n        });\n        window.addEventListener(\"mouseup\", (e) => {\n            control.fire = false;\n        });\n        window.addEventListener(\"resize\", (e) => {\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n        });\n    }\n    function animate(time) {\n        if (last_frame_time === null) {\n            last_frame_time = time;\n            requestAnimationFrame(animate);\n            return;\n        }\n        let start = (new THREE.Vector3(control.mouse.x, control.mouse.y, 0)).unproject(camera);\n        let end = (new THREE.Vector3(control.mouse.x, control.mouse.y, 1)).unproject(camera);\n        let line = new THREE.Line3(start, end);\n        let intersection = plane.intersectLine(line);\n        let elapsed_seconds = (time - last_frame_time) * 0.001;\n        last_frame_time = time;\n        let speed = 400;\n        if (control.left) {\n            mesh.position.x -= speed * elapsed_seconds;\n        }\n        if (control.right) {\n            mesh.position.x += speed * elapsed_seconds;\n        }\n        if (control.up) {\n            mesh.position.y += speed * elapsed_seconds;\n        }\n        if (control.down) {\n            mesh.position.y -= speed * elapsed_seconds;\n        }\n        if (intersection) {\n            sphere.position.x = intersection.x;\n            sphere.position.y = intersection.y;\n            sphere.position.z = intersection.z;\n        }\n        let subs = (new THREE.Vector3()).subVectors(sphere.position, mesh.position);\n        let angle = Math.atan2(subs.y, subs.x);\n        mesh.setRotationFromAxisAngle(new THREE.Vector3(0, 0, 1), angle);\n        bullets.elapsed_time += elapsed_seconds;\n        if (control.fire && bullets.elapsed_time > bullets.expected_time) {\n            let l = bullets.collection.length;\n            let bullet_mesh = null;\n            let found_bullet_id = -1;\n            for (let i = 0; i < l; ++i) {\n                if (bullets.timers[i] < 0) {\n                    found_bullet_id = i;\n                    break;\n                }\n            }\n            let bullet_angle = angle + (Math.random() * 2 - 1) * 0.05;\n            let direction_vector = (new THREE.Vector3(Math.cos(bullet_angle), Math.sin(bullet_angle), 0)).multiplyScalar(bullets.speed);\n            if (found_bullet_id > -1) {\n                bullet_mesh = bullets.collection[found_bullet_id];\n                bullets.timers[found_bullet_id] = bullets.live_time;\n                bullets.directions[found_bullet_id] = direction_vector;\n            }\n            else {\n                bullet_mesh = new THREE.Mesh(new THREE.SphereGeometry(10, 10, 10), new THREE.MeshBasicMaterial({ color: 0xcccccc }));\n                bullets.directions.push(direction_vector);\n                bullets.collection.push(bullet_mesh);\n                bullets.timers.push(bullets.live_time);\n            }\n            bullet_mesh.setRotationFromAxisAngle(new THREE.Vector3(0, 0, 1), bullet_angle);\n            bullet_mesh.position.copy(mesh.position);\n            scene.add(bullet_mesh);\n            bullets.elapsed_time = 0;\n        }\n        let l = bullets.collection.length;\n        let bullet_collider = new THREE.Sphere(new THREE.Vector3(0, 0, 0), 10);\n        let enemy_collider = new THREE.Box3().setFromObject(enemy);\n        for (let i = 0; i < l; ++i) {\n            if (bullets.timers[i] >= 0) {\n                bullets.collection[i].position.add(bullets.directions[i]);\n                bullets.timers[i] -= elapsed_seconds;\n                bullet_collider.center.copy(bullets.collection[i].position);\n                if (bullet_collider.intersectsBox(enemy_collider)) {\n                    bullets.timers[i] = -1;\n                    bullets.collection[i].position.x = 10000;\n                    enemy.position.add(bullets.directions[i]);\n                }\n            }\n        }\n        //renderer.render( scene, camera );\n        composer.render();\n        requestAnimationFrame(animate);\n    }\n    function request_fullscreen(elem) {\n        let request_fs = elem.requestFullscreen || elem.webkitRequestFullscreen || elem.mozRequestFullScreen || null;\n        let exit_fs = document.exitFullscreen || document.webkitExitFullscreen || document.mozCancelFullScreen || null;\n        if (is_fullscreen_enabled) {\n            if (exit_fs !== null) {\n                exit_fs.call(document);\n                is_fullscreen_enabled = false;\n            }\n        }\n        else {\n            if (request_fs !== null) {\n                request_fs.call(elem);\n                is_fullscreen_enabled = true;\n            }\n        }\n    }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core.ts\n// module id = 0\n// module chunks = 0"],"sourceRoot":""}